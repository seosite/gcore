// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package huangli

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HuangLiClient is the client API for HuangLi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HuangLiClient interface {
	// 获取某天的黄历-汇总
	GetHuangLiByDate(ctx context.Context, in *GetHuangLiByDateRequest, opts ...grpc.CallOption) (*GetHuangLiByDateResponse, error)
	// 获取某天下的黄历时间列表
	GetHuangLiHoursByDate(ctx context.Context, in *GetHuangLiHoursByDateRequest, opts ...grpc.CallOption) (*GetHuangLiHoursByDateResponse, error)
	// 获取某天的黄历图
	GetHuangLiPicByDate(ctx context.Context, in *GetHuangLiPicByDateRequest, opts ...grpc.CallOption) (*GetHuangLiPicByDateResponse, error)
	// 获取某天的老黄历
	GetYellowHuangLiByDate(ctx context.Context, in *GetYellowHuangLiByDateRequest, opts ...grpc.CallOption) (*GetYellowHuangLiByDateResponse, error)
	// 获取某天的万年年
	GetYellowCalendarByDate(ctx context.Context, in *GetYellowCalendarByDateRequest, opts ...grpc.CallOption) (*GetYellowCalendarByDateResponse, error)
	//  历史上的今天-列表
	GetHistoryByDate(ctx context.Context, in *GetHistoryByDateRequest, opts ...grpc.CallOption) (*GetHistoryByDateResponse, error)
	//  历史上的今天-详情
	GetHistoryInfoByEID(ctx context.Context, in *GetHistoryInfoByEIDRequest, opts ...grpc.CallOption) (*GetHistoryInfoByEIDResponse, error)
	//  查询节假日-列表
	GetHolidayList(ctx context.Context, in *GetHolidayListRequest, opts ...grpc.CallOption) (*GetHolidayListResponse, error)
}

type huangLiClient struct {
	cc grpc.ClientConnInterface
}

func NewHuangLiClient(cc grpc.ClientConnInterface) HuangLiClient {
	return &huangLiClient{cc}
}

func (c *huangLiClient) GetHuangLiByDate(ctx context.Context, in *GetHuangLiByDateRequest, opts ...grpc.CallOption) (*GetHuangLiByDateResponse, error) {
	out := new(GetHuangLiByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHuangLiByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetHuangLiHoursByDate(ctx context.Context, in *GetHuangLiHoursByDateRequest, opts ...grpc.CallOption) (*GetHuangLiHoursByDateResponse, error) {
	out := new(GetHuangLiHoursByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHuangLiHoursByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetHuangLiPicByDate(ctx context.Context, in *GetHuangLiPicByDateRequest, opts ...grpc.CallOption) (*GetHuangLiPicByDateResponse, error) {
	out := new(GetHuangLiPicByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHuangLiPicByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetYellowHuangLiByDate(ctx context.Context, in *GetYellowHuangLiByDateRequest, opts ...grpc.CallOption) (*GetYellowHuangLiByDateResponse, error) {
	out := new(GetYellowHuangLiByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetYellowHuangLiByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetYellowCalendarByDate(ctx context.Context, in *GetYellowCalendarByDateRequest, opts ...grpc.CallOption) (*GetYellowCalendarByDateResponse, error) {
	out := new(GetYellowCalendarByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetYellowCalendarByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetHistoryByDate(ctx context.Context, in *GetHistoryByDateRequest, opts ...grpc.CallOption) (*GetHistoryByDateResponse, error) {
	out := new(GetHistoryByDateResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHistoryByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetHistoryInfoByEID(ctx context.Context, in *GetHistoryInfoByEIDRequest, opts ...grpc.CallOption) (*GetHistoryInfoByEIDResponse, error) {
	out := new(GetHistoryInfoByEIDResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHistoryInfoByEID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *huangLiClient) GetHolidayList(ctx context.Context, in *GetHolidayListRequest, opts ...grpc.CallOption) (*GetHolidayListResponse, error) {
	out := new(GetHolidayListResponse)
	err := c.cc.Invoke(ctx, "/proto.HuangLi/GetHolidayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HuangLiServer is the server API for HuangLi service.
// All implementations must embed UnimplementedHuangLiServer
// for forward compatibility
type HuangLiServer interface {
	// 获取某天的黄历-汇总
	GetHuangLiByDate(context.Context, *GetHuangLiByDateRequest) (*GetHuangLiByDateResponse, error)
	// 获取某天下的黄历时间列表
	GetHuangLiHoursByDate(context.Context, *GetHuangLiHoursByDateRequest) (*GetHuangLiHoursByDateResponse, error)
	// 获取某天的黄历图
	GetHuangLiPicByDate(context.Context, *GetHuangLiPicByDateRequest) (*GetHuangLiPicByDateResponse, error)
	// 获取某天的老黄历
	GetYellowHuangLiByDate(context.Context, *GetYellowHuangLiByDateRequest) (*GetYellowHuangLiByDateResponse, error)
	// 获取某天的万年年
	GetYellowCalendarByDate(context.Context, *GetYellowCalendarByDateRequest) (*GetYellowCalendarByDateResponse, error)
	//  历史上的今天-列表
	GetHistoryByDate(context.Context, *GetHistoryByDateRequest) (*GetHistoryByDateResponse, error)
	//  历史上的今天-详情
	GetHistoryInfoByEID(context.Context, *GetHistoryInfoByEIDRequest) (*GetHistoryInfoByEIDResponse, error)
	//  查询节假日-列表
	GetHolidayList(context.Context, *GetHolidayListRequest) (*GetHolidayListResponse, error)
	mustEmbedUnimplementedHuangLiServer()
}

// UnimplementedHuangLiServer must be embedded to have forward compatible implementations.
type UnimplementedHuangLiServer struct {
}

func (UnimplementedHuangLiServer) GetHuangLiByDate(context.Context, *GetHuangLiByDateRequest) (*GetHuangLiByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuangLiByDate not implemented")
}
func (UnimplementedHuangLiServer) GetHuangLiHoursByDate(context.Context, *GetHuangLiHoursByDateRequest) (*GetHuangLiHoursByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuangLiHoursByDate not implemented")
}
func (UnimplementedHuangLiServer) GetHuangLiPicByDate(context.Context, *GetHuangLiPicByDateRequest) (*GetHuangLiPicByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHuangLiPicByDate not implemented")
}
func (UnimplementedHuangLiServer) GetYellowHuangLiByDate(context.Context, *GetYellowHuangLiByDateRequest) (*GetYellowHuangLiByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYellowHuangLiByDate not implemented")
}
func (UnimplementedHuangLiServer) GetYellowCalendarByDate(context.Context, *GetYellowCalendarByDateRequest) (*GetYellowCalendarByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYellowCalendarByDate not implemented")
}
func (UnimplementedHuangLiServer) GetHistoryByDate(context.Context, *GetHistoryByDateRequest) (*GetHistoryByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryByDate not implemented")
}
func (UnimplementedHuangLiServer) GetHistoryInfoByEID(context.Context, *GetHistoryInfoByEIDRequest) (*GetHistoryInfoByEIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryInfoByEID not implemented")
}
func (UnimplementedHuangLiServer) GetHolidayList(context.Context, *GetHolidayListRequest) (*GetHolidayListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayList not implemented")
}
func (UnimplementedHuangLiServer) mustEmbedUnimplementedHuangLiServer() {}

// UnsafeHuangLiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HuangLiServer will
// result in compilation errors.
type UnsafeHuangLiServer interface {
	mustEmbedUnimplementedHuangLiServer()
}

func RegisterHuangLiServer(s grpc.ServiceRegistrar, srv HuangLiServer) {
	s.RegisterService(&HuangLi_ServiceDesc, srv)
}

func _HuangLi_GetHuangLiByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuangLiByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHuangLiByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHuangLiByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHuangLiByDate(ctx, req.(*GetHuangLiByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetHuangLiHoursByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuangLiHoursByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHuangLiHoursByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHuangLiHoursByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHuangLiHoursByDate(ctx, req.(*GetHuangLiHoursByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetHuangLiPicByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHuangLiPicByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHuangLiPicByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHuangLiPicByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHuangLiPicByDate(ctx, req.(*GetHuangLiPicByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetYellowHuangLiByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYellowHuangLiByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetYellowHuangLiByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetYellowHuangLiByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetYellowHuangLiByDate(ctx, req.(*GetYellowHuangLiByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetYellowCalendarByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYellowCalendarByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetYellowCalendarByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetYellowCalendarByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetYellowCalendarByDate(ctx, req.(*GetYellowCalendarByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetHistoryByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHistoryByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHistoryByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHistoryByDate(ctx, req.(*GetHistoryByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetHistoryInfoByEID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryInfoByEIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHistoryInfoByEID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHistoryInfoByEID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHistoryInfoByEID(ctx, req.(*GetHistoryInfoByEIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HuangLi_GetHolidayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuangLiServer).GetHolidayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HuangLi/GetHolidayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuangLiServer).GetHolidayList(ctx, req.(*GetHolidayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HuangLi_ServiceDesc is the grpc.ServiceDesc for HuangLi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HuangLi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HuangLi",
	HandlerType: (*HuangLiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHuangLiByDate",
			Handler:    _HuangLi_GetHuangLiByDate_Handler,
		},
		{
			MethodName: "GetHuangLiHoursByDate",
			Handler:    _HuangLi_GetHuangLiHoursByDate_Handler,
		},
		{
			MethodName: "GetHuangLiPicByDate",
			Handler:    _HuangLi_GetHuangLiPicByDate_Handler,
		},
		{
			MethodName: "GetYellowHuangLiByDate",
			Handler:    _HuangLi_GetYellowHuangLiByDate_Handler,
		},
		{
			MethodName: "GetYellowCalendarByDate",
			Handler:    _HuangLi_GetYellowCalendarByDate_Handler,
		},
		{
			MethodName: "GetHistoryByDate",
			Handler:    _HuangLi_GetHistoryByDate_Handler,
		},
		{
			MethodName: "GetHistoryInfoByEID",
			Handler:    _HuangLi_GetHistoryInfoByEID_Handler,
		},
		{
			MethodName: "GetHolidayList",
			Handler:    _HuangLi_GetHolidayList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/huangli/huangli.proto",
}
