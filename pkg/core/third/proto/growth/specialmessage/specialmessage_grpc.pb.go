// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package specialmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpecialClient is the client API for Special service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecialClient interface {
	// 创建消息
	CreateSpecialMessage(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*SpecialMessageResponse, error)
	// 获取某天消息
	ReadSpecialMessage(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*SpecialMessageResponse, error)
	// 更新消息
	UpdateSpecialMessage(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*SpecialMessageResponse, error)
	// 获取所有的消息列表
	ReadAllSpecialMessages(ctx context.Context, in *ReadAllListRequest, opts ...grpc.CallOption) (*ReadAllListResponse, error)
	// 删除某天消息
	DeleteSpecialMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// 上传图片
	UploadImageSpecialMessage(ctx context.Context, in *UploadMessageRequest, opts ...grpc.CallOption) (*UploadMessageResponse, error)
	// 删除 mediaId
	DeleteMediaIdSpecialMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// 后台消息任务获取消息模版
	GetMessageForTaskSpecialMessage(ctx context.Context, in *GetMessageForTaskRequest, opts ...grpc.CallOption) (*GetMessageForTaskResponse, error)
}

type specialClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecialClient(cc grpc.ClientConnInterface) SpecialClient {
	return &specialClient{cc}
}

func (c *specialClient) CreateSpecialMessage(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*SpecialMessageResponse, error) {
	out := new(SpecialMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/CreateSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) ReadSpecialMessage(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*SpecialMessageResponse, error) {
	out := new(SpecialMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/ReadSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) UpdateSpecialMessage(ctx context.Context, in *PushMessage, opts ...grpc.CallOption) (*SpecialMessageResponse, error) {
	out := new(SpecialMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/UpdateSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) ReadAllSpecialMessages(ctx context.Context, in *ReadAllListRequest, opts ...grpc.CallOption) (*ReadAllListResponse, error) {
	out := new(ReadAllListResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/ReadAllSpecialMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) DeleteSpecialMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/DeleteSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) UploadImageSpecialMessage(ctx context.Context, in *UploadMessageRequest, opts ...grpc.CallOption) (*UploadMessageResponse, error) {
	out := new(UploadMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/UploadImageSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) DeleteMediaIdSpecialMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/DeleteMediaIdSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specialClient) GetMessageForTaskSpecialMessage(ctx context.Context, in *GetMessageForTaskRequest, opts ...grpc.CallOption) (*GetMessageForTaskResponse, error) {
	out := new(GetMessageForTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.Special/GetMessageForTaskSpecialMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecialServer is the server API for Special service.
// All implementations must embed UnimplementedSpecialServer
// for forward compatibility
type SpecialServer interface {
	// 创建消息
	CreateSpecialMessage(context.Context, *PushMessage) (*SpecialMessageResponse, error)
	// 获取某天消息
	ReadSpecialMessage(context.Context, *ReadRequest) (*SpecialMessageResponse, error)
	// 更新消息
	UpdateSpecialMessage(context.Context, *PushMessage) (*SpecialMessageResponse, error)
	// 获取所有的消息列表
	ReadAllSpecialMessages(context.Context, *ReadAllListRequest) (*ReadAllListResponse, error)
	// 删除某天消息
	DeleteSpecialMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// 上传图片
	UploadImageSpecialMessage(context.Context, *UploadMessageRequest) (*UploadMessageResponse, error)
	// 删除 mediaId
	DeleteMediaIdSpecialMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// 后台消息任务获取消息模版
	GetMessageForTaskSpecialMessage(context.Context, *GetMessageForTaskRequest) (*GetMessageForTaskResponse, error)
	mustEmbedUnimplementedSpecialServer()
}

// UnimplementedSpecialServer must be embedded to have forward compatible implementations.
type UnimplementedSpecialServer struct {
}

func (UnimplementedSpecialServer) CreateSpecialMessage(context.Context, *PushMessage) (*SpecialMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) ReadSpecialMessage(context.Context, *ReadRequest) (*SpecialMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) UpdateSpecialMessage(context.Context, *PushMessage) (*SpecialMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) ReadAllSpecialMessages(context.Context, *ReadAllListRequest) (*ReadAllListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllSpecialMessages not implemented")
}
func (UnimplementedSpecialServer) DeleteSpecialMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) UploadImageSpecialMessage(context.Context, *UploadMessageRequest) (*UploadMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImageSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) DeleteMediaIdSpecialMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaIdSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) GetMessageForTaskSpecialMessage(context.Context, *GetMessageForTaskRequest) (*GetMessageForTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageForTaskSpecialMessage not implemented")
}
func (UnimplementedSpecialServer) mustEmbedUnimplementedSpecialServer() {}

// UnsafeSpecialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecialServer will
// result in compilation errors.
type UnsafeSpecialServer interface {
	mustEmbedUnimplementedSpecialServer()
}

func RegisterSpecialServer(s grpc.ServiceRegistrar, srv SpecialServer) {
	s.RegisterService(&Special_ServiceDesc, srv)
}

func _Special_CreateSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).CreateSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/CreateSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).CreateSpecialMessage(ctx, req.(*PushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_ReadSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).ReadSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/ReadSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).ReadSpecialMessage(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_UpdateSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).UpdateSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/UpdateSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).UpdateSpecialMessage(ctx, req.(*PushMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_ReadAllSpecialMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).ReadAllSpecialMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/ReadAllSpecialMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).ReadAllSpecialMessages(ctx, req.(*ReadAllListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_DeleteSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).DeleteSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/DeleteSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).DeleteSpecialMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_UploadImageSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).UploadImageSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/UploadImageSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).UploadImageSpecialMessage(ctx, req.(*UploadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_DeleteMediaIdSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).DeleteMediaIdSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/DeleteMediaIdSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).DeleteMediaIdSpecialMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Special_GetMessageForTaskSpecialMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageForTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecialServer).GetMessageForTaskSpecialMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Special/GetMessageForTaskSpecialMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecialServer).GetMessageForTaskSpecialMessage(ctx, req.(*GetMessageForTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Special_ServiceDesc is the grpc.ServiceDesc for Special service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Special_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Special",
	HandlerType: (*SpecialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpecialMessage",
			Handler:    _Special_CreateSpecialMessage_Handler,
		},
		{
			MethodName: "ReadSpecialMessage",
			Handler:    _Special_ReadSpecialMessage_Handler,
		},
		{
			MethodName: "UpdateSpecialMessage",
			Handler:    _Special_UpdateSpecialMessage_Handler,
		},
		{
			MethodName: "ReadAllSpecialMessages",
			Handler:    _Special_ReadAllSpecialMessages_Handler,
		},
		{
			MethodName: "DeleteSpecialMessage",
			Handler:    _Special_DeleteSpecialMessage_Handler,
		},
		{
			MethodName: "UploadImageSpecialMessage",
			Handler:    _Special_UploadImageSpecialMessage_Handler,
		},
		{
			MethodName: "DeleteMediaIdSpecialMessage",
			Handler:    _Special_DeleteMediaIdSpecialMessage_Handler,
		},
		{
			MethodName: "GetMessageForTaskSpecialMessage",
			Handler:    _Special_GetMessageForTaskSpecialMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/specialmessage/specialmessage.proto",
}
