// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wxapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	GetListByPage(ctx context.Context, in *AppPageListRequest, opts ...grpc.CallOption) (*AppPageListResponse, error)
	GetCodeNameList(ctx context.Context, in *GetCodeNameListRequest, opts ...grpc.CallOption) (*GetCodeNameListResponse, error)
	GetOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error)
	CreateOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error)
	UpdateOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error)
	ChangeStatus(ctx context.Context, in *AppChangeStatusRequest, opts ...grpc.CallOption) (*AppChangeStatusResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) GetListByPage(ctx context.Context, in *AppPageListRequest, opts ...grpc.CallOption) (*AppPageListResponse, error) {
	out := new(AppPageListResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/GetListByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetCodeNameList(ctx context.Context, in *GetCodeNameListRequest, opts ...grpc.CallOption) (*GetCodeNameListResponse, error) {
	out := new(GetCodeNameListResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/GetCodeNameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/CreateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateOne(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/UpdateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ChangeStatus(ctx context.Context, in *AppChangeStatusRequest, opts ...grpc.CallOption) (*AppChangeStatusResponse, error) {
	out := new(AppChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.AppService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	GetListByPage(context.Context, *AppPageListRequest) (*AppPageListResponse, error)
	GetCodeNameList(context.Context, *GetCodeNameListRequest) (*GetCodeNameListResponse, error)
	GetOne(context.Context, *App) (*AppResponse, error)
	CreateOne(context.Context, *App) (*AppResponse, error)
	UpdateOne(context.Context, *App) (*AppResponse, error)
	ChangeStatus(context.Context, *AppChangeStatusRequest) (*AppChangeStatusResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) GetListByPage(context.Context, *AppPageListRequest) (*AppPageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByPage not implemented")
}
func (UnimplementedAppServiceServer) GetCodeNameList(context.Context, *GetCodeNameListRequest) (*GetCodeNameListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeNameList not implemented")
}
func (UnimplementedAppServiceServer) GetOne(context.Context, *App) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedAppServiceServer) CreateOne(context.Context, *App) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOne not implemented")
}
func (UnimplementedAppServiceServer) UpdateOne(context.Context, *App) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedAppServiceServer) ChangeStatus(context.Context, *AppChangeStatusRequest) (*AppChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_GetListByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetListByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/GetListByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetListByPage(ctx, req.(*AppPageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetCodeNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeNameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetCodeNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/GetCodeNameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetCodeNameList(ctx, req.(*GetCodeNameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetOne(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/CreateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateOne(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/UpdateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateOne(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ChangeStatus(ctx, req.(*AppChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListByPage",
			Handler:    _AppService_GetListByPage_Handler,
		},
		{
			MethodName: "GetCodeNameList",
			Handler:    _AppService_GetCodeNameList_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _AppService_GetOne_Handler,
		},
		{
			MethodName: "CreateOne",
			Handler:    _AppService_CreateOne_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _AppService_UpdateOne_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _AppService_ChangeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/wx_app/app.proto",
}
