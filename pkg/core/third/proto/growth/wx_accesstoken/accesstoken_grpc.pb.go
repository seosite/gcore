// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wxaccesstoken

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccessTokenServiceClient is the client API for AccessTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessTokenServiceClient interface {
	GetByAppIDSecret(ctx context.Context, in *GetByAppIDSecretRequest, opts ...grpc.CallOption) (*GetByAppIDSecretResponse, error)
	GetByAppCode(ctx context.Context, in *GetByAppCodeRequest, opts ...grpc.CallOption) (*GetByAppCodeResponse, error)
}

type accessTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessTokenServiceClient(cc grpc.ClientConnInterface) AccessTokenServiceClient {
	return &accessTokenServiceClient{cc}
}

func (c *accessTokenServiceClient) GetByAppIDSecret(ctx context.Context, in *GetByAppIDSecretRequest, opts ...grpc.CallOption) (*GetByAppIDSecretResponse, error) {
	out := new(GetByAppIDSecretResponse)
	err := c.cc.Invoke(ctx, "/proto.AccessTokenService/GetByAppIDSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessTokenServiceClient) GetByAppCode(ctx context.Context, in *GetByAppCodeRequest, opts ...grpc.CallOption) (*GetByAppCodeResponse, error) {
	out := new(GetByAppCodeResponse)
	err := c.cc.Invoke(ctx, "/proto.AccessTokenService/GetByAppCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessTokenServiceServer is the server API for AccessTokenService service.
// All implementations must embed UnimplementedAccessTokenServiceServer
// for forward compatibility
type AccessTokenServiceServer interface {
	GetByAppIDSecret(context.Context, *GetByAppIDSecretRequest) (*GetByAppIDSecretResponse, error)
	GetByAppCode(context.Context, *GetByAppCodeRequest) (*GetByAppCodeResponse, error)
	mustEmbedUnimplementedAccessTokenServiceServer()
}

// UnimplementedAccessTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessTokenServiceServer struct {
}

func (UnimplementedAccessTokenServiceServer) GetByAppIDSecret(context.Context, *GetByAppIDSecretRequest) (*GetByAppIDSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAppIDSecret not implemented")
}
func (UnimplementedAccessTokenServiceServer) GetByAppCode(context.Context, *GetByAppCodeRequest) (*GetByAppCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAppCode not implemented")
}
func (UnimplementedAccessTokenServiceServer) mustEmbedUnimplementedAccessTokenServiceServer() {}

// UnsafeAccessTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessTokenServiceServer will
// result in compilation errors.
type UnsafeAccessTokenServiceServer interface {
	mustEmbedUnimplementedAccessTokenServiceServer()
}

func RegisterAccessTokenServiceServer(s grpc.ServiceRegistrar, srv AccessTokenServiceServer) {
	s.RegisterService(&AccessTokenService_ServiceDesc, srv)
}

func _AccessTokenService_GetByAppIDSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppIDSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessTokenServiceServer).GetByAppIDSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccessTokenService/GetByAppIDSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessTokenServiceServer).GetByAppIDSecret(ctx, req.(*GetByAppIDSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessTokenService_GetByAppCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAppCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessTokenServiceServer).GetByAppCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccessTokenService/GetByAppCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessTokenServiceServer).GetByAppCode(ctx, req.(*GetByAppCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessTokenService_ServiceDesc is the grpc.ServiceDesc for AccessTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccessTokenService",
	HandlerType: (*AccessTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByAppIDSecret",
			Handler:    _AccessTokenService_GetByAppIDSecret_Handler,
		},
		{
			MethodName: "GetByAppCode",
			Handler:    _AccessTokenService_GetByAppCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/wx_accesstoken/accesstoken.proto",
}
