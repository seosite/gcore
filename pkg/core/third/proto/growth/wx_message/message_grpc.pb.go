// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wxmessage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetListByPage(ctx context.Context, in *MessagePageListRequest, opts ...grpc.CallOption) (*MessagePageListResponse, error)
	GetOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
	ChangeStatus(ctx context.Context, in *MessageChangeStatusRequest, opts ...grpc.CallOption) (*MessageChangeStatusResponse, error)
	GetOneBySubscribe(ctx context.Context, in *GetOneBySubscribeRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetOneLinkByMP(ctx context.Context, in *GetOneLinkByMPRequest, opts ...grpc.CallOption) (*MessageLinkResponse, error)
	GetSendLogsByPage(ctx context.Context, in *MessageSendLogRequest, opts ...grpc.CallOption) (*MessageSendLogResponse, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetListByPage(ctx context.Context, in *MessagePageListRequest, opts ...grpc.CallOption) (*MessagePageListResponse, error) {
	out := new(MessagePageListResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/GetListByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) CreateOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/CreateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateOne(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/UpdateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ChangeStatus(ctx context.Context, in *MessageChangeStatusRequest, opts ...grpc.CallOption) (*MessageChangeStatusResponse, error) {
	out := new(MessageChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetOneBySubscribe(ctx context.Context, in *GetOneBySubscribeRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/GetOneBySubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetOneLinkByMP(ctx context.Context, in *GetOneLinkByMPRequest, opts ...grpc.CallOption) (*MessageLinkResponse, error) {
	out := new(MessageLinkResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/GetOneLinkByMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetSendLogsByPage(ctx context.Context, in *MessageSendLogRequest, opts ...grpc.CallOption) (*MessageSendLogResponse, error) {
	out := new(MessageSendLogResponse)
	err := c.cc.Invoke(ctx, "/proto.MessageService/GetSendLogsByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	GetListByPage(context.Context, *MessagePageListRequest) (*MessagePageListResponse, error)
	GetOne(context.Context, *Message) (*MessageResponse, error)
	CreateOne(context.Context, *Message) (*MessageResponse, error)
	UpdateOne(context.Context, *Message) (*MessageResponse, error)
	ChangeStatus(context.Context, *MessageChangeStatusRequest) (*MessageChangeStatusResponse, error)
	GetOneBySubscribe(context.Context, *GetOneBySubscribeRequest) (*MessageResponse, error)
	GetOneLinkByMP(context.Context, *GetOneLinkByMPRequest) (*MessageLinkResponse, error)
	GetSendLogsByPage(context.Context, *MessageSendLogRequest) (*MessageSendLogResponse, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetListByPage(context.Context, *MessagePageListRequest) (*MessagePageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByPage not implemented")
}
func (UnimplementedMessageServiceServer) GetOne(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedMessageServiceServer) CreateOne(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOne not implemented")
}
func (UnimplementedMessageServiceServer) UpdateOne(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedMessageServiceServer) ChangeStatus(context.Context, *MessageChangeStatusRequest) (*MessageChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedMessageServiceServer) GetOneBySubscribe(context.Context, *GetOneBySubscribeRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBySubscribe not implemented")
}
func (UnimplementedMessageServiceServer) GetOneLinkByMP(context.Context, *GetOneLinkByMPRequest) (*MessageLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneLinkByMP not implemented")
}
func (UnimplementedMessageServiceServer) GetSendLogsByPage(context.Context, *MessageSendLogRequest) (*MessageSendLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendLogsByPage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetListByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetListByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetListByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetListByPage(ctx, req.(*MessagePageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetOne(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_CreateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CreateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/CreateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CreateOne(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/UpdateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateOne(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ChangeStatus(ctx, req.(*MessageChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetOneBySubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneBySubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetOneBySubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetOneBySubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetOneBySubscribe(ctx, req.(*GetOneBySubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetOneLinkByMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneLinkByMPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetOneLinkByMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetOneLinkByMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetOneLinkByMP(ctx, req.(*GetOneLinkByMPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetSendLogsByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSendLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetSendLogsByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MessageService/GetSendLogsByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetSendLogsByPage(ctx, req.(*MessageSendLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListByPage",
			Handler:    _MessageService_GetListByPage_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _MessageService_GetOne_Handler,
		},
		{
			MethodName: "CreateOne",
			Handler:    _MessageService_CreateOne_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _MessageService_UpdateOne_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _MessageService_ChangeStatus_Handler,
		},
		{
			MethodName: "GetOneBySubscribe",
			Handler:    _MessageService_GetOneBySubscribe_Handler,
		},
		{
			MethodName: "GetOneLinkByMP",
			Handler:    _MessageService_GetOneLinkByMP_Handler,
		},
		{
			MethodName: "GetSendLogsByPage",
			Handler:    _MessageService_GetSendLogsByPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/wx_message/message.proto",
}
