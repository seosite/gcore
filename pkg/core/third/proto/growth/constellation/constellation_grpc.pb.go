// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package constellation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConstellationClient is the client API for Constellation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConstellationClient interface {
	// 获取某日的运势
	GetByDate(ctx context.Context, in *GetByDateReq, opts ...grpc.CallOption) (*GetByDateRes, error)
	// 获取某周的运势
	GetWeekByDate(ctx context.Context, in *GetWeekByDateReq, opts ...grpc.CallOption) (*GetWeekByDateRes, error)
	// 获取某月的运势
	GetMonthByDate(ctx context.Context, in *GetMonthByDateReq, opts ...grpc.CallOption) (*GetMonthByDateRes, error)
	// 获取某年的运势
	GetYearByDate(ctx context.Context, in *GetYearByDateReq, opts ...grpc.CallOption) (*GetYearByDateRes, error)
	// 获取某日的运势图
	GetPicByDate(ctx context.Context, in *GetPicByDateReq, opts ...grpc.CallOption) (*GetPicByDateRes, error)
	// 获取某周的运势图
	GetWeekPicByDate(ctx context.Context, in *GetWeekPicByDateReq, opts ...grpc.CallOption) (*GetWeekPicByDateRes, error)
	// 获取某月的运势图
	GetMonthPicByDate(ctx context.Context, in *GetMonthPicByDateReq, opts ...grpc.CallOption) (*GetMonthPicByDateRes, error)
	// 获取某年的运势图
	GetYearPicByDate(ctx context.Context, in *GetYearPicByDateReq, opts ...grpc.CallOption) (*GetYearPicByDateRes, error)
	// 获取星座配对
	GetXZPD(ctx context.Context, in *GetXZPDReq, opts ...grpc.CallOption) (*GetXZPDRes, error)
	// 获取星座配对图
	GetXZPDPic(ctx context.Context, in *GetXZPDPicReq, opts ...grpc.CallOption) (*GetXZPDPicRes, error)
}

type constellationClient struct {
	cc grpc.ClientConnInterface
}

func NewConstellationClient(cc grpc.ClientConnInterface) ConstellationClient {
	return &constellationClient{cc}
}

func (c *constellationClient) GetByDate(ctx context.Context, in *GetByDateReq, opts ...grpc.CallOption) (*GetByDateRes, error) {
	out := new(GetByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetWeekByDate(ctx context.Context, in *GetWeekByDateReq, opts ...grpc.CallOption) (*GetWeekByDateRes, error) {
	out := new(GetWeekByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetWeekByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetMonthByDate(ctx context.Context, in *GetMonthByDateReq, opts ...grpc.CallOption) (*GetMonthByDateRes, error) {
	out := new(GetMonthByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetMonthByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetYearByDate(ctx context.Context, in *GetYearByDateReq, opts ...grpc.CallOption) (*GetYearByDateRes, error) {
	out := new(GetYearByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetYearByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetPicByDate(ctx context.Context, in *GetPicByDateReq, opts ...grpc.CallOption) (*GetPicByDateRes, error) {
	out := new(GetPicByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetPicByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetWeekPicByDate(ctx context.Context, in *GetWeekPicByDateReq, opts ...grpc.CallOption) (*GetWeekPicByDateRes, error) {
	out := new(GetWeekPicByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetWeekPicByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetMonthPicByDate(ctx context.Context, in *GetMonthPicByDateReq, opts ...grpc.CallOption) (*GetMonthPicByDateRes, error) {
	out := new(GetMonthPicByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetMonthPicByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetYearPicByDate(ctx context.Context, in *GetYearPicByDateReq, opts ...grpc.CallOption) (*GetYearPicByDateRes, error) {
	out := new(GetYearPicByDateRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetYearPicByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetXZPD(ctx context.Context, in *GetXZPDReq, opts ...grpc.CallOption) (*GetXZPDRes, error) {
	out := new(GetXZPDRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetXZPD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *constellationClient) GetXZPDPic(ctx context.Context, in *GetXZPDPicReq, opts ...grpc.CallOption) (*GetXZPDPicRes, error) {
	out := new(GetXZPDPicRes)
	err := c.cc.Invoke(ctx, "/proto.Constellation/GetXZPDPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConstellationServer is the server API for Constellation service.
// All implementations must embed UnimplementedConstellationServer
// for forward compatibility
type ConstellationServer interface {
	// 获取某日的运势
	GetByDate(context.Context, *GetByDateReq) (*GetByDateRes, error)
	// 获取某周的运势
	GetWeekByDate(context.Context, *GetWeekByDateReq) (*GetWeekByDateRes, error)
	// 获取某月的运势
	GetMonthByDate(context.Context, *GetMonthByDateReq) (*GetMonthByDateRes, error)
	// 获取某年的运势
	GetYearByDate(context.Context, *GetYearByDateReq) (*GetYearByDateRes, error)
	// 获取某日的运势图
	GetPicByDate(context.Context, *GetPicByDateReq) (*GetPicByDateRes, error)
	// 获取某周的运势图
	GetWeekPicByDate(context.Context, *GetWeekPicByDateReq) (*GetWeekPicByDateRes, error)
	// 获取某月的运势图
	GetMonthPicByDate(context.Context, *GetMonthPicByDateReq) (*GetMonthPicByDateRes, error)
	// 获取某年的运势图
	GetYearPicByDate(context.Context, *GetYearPicByDateReq) (*GetYearPicByDateRes, error)
	// 获取星座配对
	GetXZPD(context.Context, *GetXZPDReq) (*GetXZPDRes, error)
	// 获取星座配对图
	GetXZPDPic(context.Context, *GetXZPDPicReq) (*GetXZPDPicRes, error)
	mustEmbedUnimplementedConstellationServer()
}

// UnimplementedConstellationServer must be embedded to have forward compatible implementations.
type UnimplementedConstellationServer struct {
}

func (UnimplementedConstellationServer) GetByDate(context.Context, *GetByDateReq) (*GetByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByDate not implemented")
}
func (UnimplementedConstellationServer) GetWeekByDate(context.Context, *GetWeekByDateReq) (*GetWeekByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekByDate not implemented")
}
func (UnimplementedConstellationServer) GetMonthByDate(context.Context, *GetMonthByDateReq) (*GetMonthByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthByDate not implemented")
}
func (UnimplementedConstellationServer) GetYearByDate(context.Context, *GetYearByDateReq) (*GetYearByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYearByDate not implemented")
}
func (UnimplementedConstellationServer) GetPicByDate(context.Context, *GetPicByDateReq) (*GetPicByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPicByDate not implemented")
}
func (UnimplementedConstellationServer) GetWeekPicByDate(context.Context, *GetWeekPicByDateReq) (*GetWeekPicByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekPicByDate not implemented")
}
func (UnimplementedConstellationServer) GetMonthPicByDate(context.Context, *GetMonthPicByDateReq) (*GetMonthPicByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthPicByDate not implemented")
}
func (UnimplementedConstellationServer) GetYearPicByDate(context.Context, *GetYearPicByDateReq) (*GetYearPicByDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYearPicByDate not implemented")
}
func (UnimplementedConstellationServer) GetXZPD(context.Context, *GetXZPDReq) (*GetXZPDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXZPD not implemented")
}
func (UnimplementedConstellationServer) GetXZPDPic(context.Context, *GetXZPDPicReq) (*GetXZPDPicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXZPDPic not implemented")
}
func (UnimplementedConstellationServer) mustEmbedUnimplementedConstellationServer() {}

// UnsafeConstellationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConstellationServer will
// result in compilation errors.
type UnsafeConstellationServer interface {
	mustEmbedUnimplementedConstellationServer()
}

func RegisterConstellationServer(s grpc.ServiceRegistrar, srv ConstellationServer) {
	s.RegisterService(&Constellation_ServiceDesc, srv)
}

func _Constellation_GetByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetByDate(ctx, req.(*GetByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetWeekByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeekByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetWeekByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetWeekByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetWeekByDate(ctx, req.(*GetWeekByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetMonthByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetMonthByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetMonthByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetMonthByDate(ctx, req.(*GetMonthByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetYearByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYearByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetYearByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetYearByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetYearByDate(ctx, req.(*GetYearByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetPicByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPicByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetPicByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetPicByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetPicByDate(ctx, req.(*GetPicByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetWeekPicByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeekPicByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetWeekPicByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetWeekPicByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetWeekPicByDate(ctx, req.(*GetWeekPicByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetMonthPicByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthPicByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetMonthPicByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetMonthPicByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetMonthPicByDate(ctx, req.(*GetMonthPicByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetYearPicByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYearPicByDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetYearPicByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetYearPicByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetYearPicByDate(ctx, req.(*GetYearPicByDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetXZPD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXZPDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetXZPD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetXZPD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetXZPD(ctx, req.(*GetXZPDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Constellation_GetXZPDPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXZPDPicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConstellationServer).GetXZPDPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Constellation/GetXZPDPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConstellationServer).GetXZPDPic(ctx, req.(*GetXZPDPicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Constellation_ServiceDesc is the grpc.ServiceDesc for Constellation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Constellation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Constellation",
	HandlerType: (*ConstellationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByDate",
			Handler:    _Constellation_GetByDate_Handler,
		},
		{
			MethodName: "GetWeekByDate",
			Handler:    _Constellation_GetWeekByDate_Handler,
		},
		{
			MethodName: "GetMonthByDate",
			Handler:    _Constellation_GetMonthByDate_Handler,
		},
		{
			MethodName: "GetYearByDate",
			Handler:    _Constellation_GetYearByDate_Handler,
		},
		{
			MethodName: "GetPicByDate",
			Handler:    _Constellation_GetPicByDate_Handler,
		},
		{
			MethodName: "GetWeekPicByDate",
			Handler:    _Constellation_GetWeekPicByDate_Handler,
		},
		{
			MethodName: "GetMonthPicByDate",
			Handler:    _Constellation_GetMonthPicByDate_Handler,
		},
		{
			MethodName: "GetYearPicByDate",
			Handler:    _Constellation_GetYearPicByDate_Handler,
		},
		{
			MethodName: "GetXZPD",
			Handler:    _Constellation_GetXZPD_Handler,
		},
		{
			MethodName: "GetXZPDPic",
			Handler:    _Constellation_GetXZPDPic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "growth/constellation/constellation.proto",
}
